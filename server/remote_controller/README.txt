SitW Client Remote Contol

/*
Author:  Steve North
Author URI:  http://www.cs.nott.ac.uk/~pszsn/
License: AGPLv3 or later
License URI: http://www.gnu.org/licenses/agpl-3.0.en.html
Can: Commercial Use, Modify, Distribute, Place Warranty
Can't: Sublicence, Hold Liable
Must: Include Copyright, Include License, State Changes, Disclose Source

Copyright (c) 2015, The University of Nottingham
*/

by Dr Steve North, MRL, University of Nottingham, UK. Steve.North@nottingham.ac.uk

This is a helper app for SitW Client, a system for 24/7 scheduling of interactive, web-based content across a network of screens. Uses for SitW Client might include urban information screens, digital signage, a univerity/business information system etc. 

SitW Client Remote Contol provides a web-based 'manual override' for the automatic content on the screens network, allowing a choice of existing experiences/applications to be shown on screen. 

An example scenario might be: 
There is a live event taking place at one of the venues containing one of the screens from the network.
Part of the event is to demonstrate the network and its content.
Content is scheduled, but demonstrators wish to quickly run through several different experiences, including some that aren't currently scheduled. SitW Client Remote Contol allows this, from any web-connected computer or mobile device. 

What's happening: if you select an experience by name, on the web server schedule.txt is backed up as schedule.bak.txt in the directory "doNotDeleteForManualMode". Then the PHP code writes a new schedule.txt file, with the selected experience running 24/7. If it is an experience that requires different settings (or location specific URLs), the code will do all of this automatically. Then all of the SitW clients will pick up the change within approximately 60 seconds. 

This app is written in PHP, HTML and Javascript. It web content is password protected. 
It is customisable (screens and experiences). 
It requires some integration with your installation of SitW Client. 
It has been tested in Firefox, Chrome (under Windows 7) and various Android browsers. May well work in others...

Please note: there are no "file locks" currently (I did play with this, but it would take more time to get working). So, if several people all use the app at once, or if you keep changing experience rapidly, the results might be unpredictable!

Files:
access.php - the code for password protection
config.php - configuration settings
index.php - the main interface - HTML generated by Javascript and PHP.
logout.php - related to password security
run_experience_now.php - most of the interesting stuff happens in here.
style.css - you can customise the look of the web interface here

Installation-

This assumes that you have access to a web server, where the schedule file (schedule.txt) for SitW Client is located and PHP is installed. 

1. Go to the location of schedule.txt (usually in a directory called autoschedule). Add a subdirectory at the same level as schedule.txt. called doNotDeleteForManualMode.

2. Inside doNotDeleteForManualMode, create a file called manualMode.txt. Add the word 'false' to this file (as the only contents) and save it. 

3. Set the permission mode to chmod 777 for: schedule.txt, doNotDeleteForManualMode and manualMode.txt.

4. Create a web visible directory and put all of the SitW Client Remote Contol files listed above into this directory. This doesn't have to be in the same place as your schedule.txt file, but you will need to know the relative path to the location of schedule.txt and have the necessary account permissions to make changes and additions to files in this location. 

5. Edit config.php...

5.1 The default password is 'hello'. To change this, you will need to create an sha1() encrypted alternative. 
You can create SHA1 passwords here:
http://www.ratajik.com/CreateNetPassword/Default.aspx
Note: you need to convert to lower case or won't recognise password...use this: http://www.convertcase.net/

5.2 Edit these lines to reflect the relative paths on your installation:
$relativePathToAdminFiles = './autoschedule/doNotDeleteForManualMode/';
$relativePathToScheduleFile = './autoschedule/';

5.3 Add the names of your screens to the $screens array, add or delete sub-arrays, as required for the number of screens in your network.

5.4 Add your experiences/web content to the $experiences array. For each experience, you will need to add the required SitW Client schedule file syntax line, including the web address. In the example, there are four screens. The number of $screens[n][defaultName] entries, must correspond to the number of screens that you have added to $screens. The order of these corresponds to the order of items in $screens. Basically, each experience must have entries for each screen. If the screens should all show the same version of the content, then each of your schedule file lines, will be identical. However, this allows you to run different location codes, different versions of the same experience to suit each venue etc.

Use:

1. You will need SitW client running at one or more screens and a schedule file containing a regular program of experiences. If are not in front of one of the screens, but you have remote access to it (via Team Viewer, for example), then start this and you can monitor the manual changeovers. 

2. In a browser, go to the folder containing the SitW Client Remote Contol files. For example: http:mysite.com/control/ where the files are inside the control folder and you are actually running control/index.php.

3. You should get the password dialog (default: 'hello').

4. From the drop-down menu below, select either an experience (or ** AUTOSCHEDULE ** to go back to the automatic schedule).
There is no SUBMIT button, the request will be sent as soon as you select from the drop-down menu.
Note: you won't get any visual feedback on the webpage that a change has been made. 
There may be a delay or up to a minute before the screen network responds (as determined by the check interval for SitW Client). Also, the 4 screens are not time synced. So, the change over may be a bit staggered. 
Your selection will run on all screens in the SitW Network, it is not currently possible to select the schedule for individual screens.

5. The bit at the bottom of the page is for more advanced (development) work It allows you to test new experiences on the network, without needing to understand the schedule file syntax. 

For example, replace http://www.cs.nott.ac.uk/sitw/experiences/soundshape/stable/ with http://news.bbc.co.uk to run this page on the screens network.  

Note: one limitation here is that you can only run web content on Firefox. We don't have an option to run with Chrome.

You don't need to add any of the schedule file syntax to control iSpy and YawCam. 

The radio buttons allow you to select whether iSpy is running or not.
2-way video = standard 4 video feeds along the bottom.
Transmit video only = run YawCam and stream, but don't display video.
No Video is obvious!

If you tick "Location aware", the app will add the appropriate arguments to the end of the URL (for exampe: ?loc=BW), putting it in the correct section of schedule.txt.

Clicking the "Run" button will change all 4 screens, as with the dropdown menu.

To change back to schedule, use **AUTOSCHEDULE** from the dropdown menu.